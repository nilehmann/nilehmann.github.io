@inproceedings{lehmannTanter:coqpl2016,
  author    = {Lehmann, Nico and Tanter,\'{E}ric},
  title     = {Formalizing Simple Refinement Types in {Coq}},
  booktitle = {2nd International Workshop on {Coq} for Programming Languages (CoqPL'16)},
  year      = 2016,
  address   = {St. Petersburg, FL, USA},
  month     = jan,
  users     = {etanter , nlehmann},
  abstract = {We consider refinement types in which base types can be refined by constraints expressible in some decidable logic. Such refinement types have been applied in many settings, such as certification of security policies, and reasoning precisely about heap updates. A lot of work has been done on extensions of the basic idea of refinements, including inference in liquid types, or mixing static and dynamic checking with hybrid type checking. Recently Chugh has proposed nested refinements, which allow the inclusion of type assertions in the logic of refinements. Combined with some heap reasoning, this allows static checking of complex idioms found in dynamic languages. The meta-theory of these advanced forms of refinements can be tricky, and we believe it would be helpful to have a basic framework in Coq on top of which to explore more complex variants of refinement types (and their meta-theory). In this context, we hereby report on our effort to formalize in Coq a simple form of refinement types, and establish their soundness. We identify some key ideas and challenges involved in the formalization, including both the modeling of the language in Coq and the proof techniques we used.}
}
