@inproceedings{rindisbacher2025ticktock,
  title={TickTock: Verified Isolation in a Production Embedded OS},
  author={Rindisbacher, Vivien and Johnson, Evan and Lehmann, Nico and Potyondy, Tyler and Pannuto, Pat and Savage, Stefan and Stefan, Deian and Jhala, Ranjit},
  booktitle={Proceedings of the 31st ACM Symposium on Operating Systems Principles (SOSP'25)},
  year={2025},
  month = sep,
  abstract={We present a case study formally verifying process isolation in the Tock production microcontroller OS kernel. Tock combines hardware memory protection units and language-level techniques—by writing the kernel in Rust—to enforce isolation between user and kernel code. Our effort to verify Tock’s process abstraction unearthed multiple, subtle bugs that broke isolation—many allowing malicious applications to compromise the whole OS. We describe this effort and TickTock, our fork of the Tock operating system kernel that eliminates isolation bugs by construction. TickTock uses Flux, an SMT-based Rust verifier, to formally specify and verify process isolation for all ARMv7-M platforms Tock supports and for three RISC-V 32-bit platforms. Our verification-guided design and implementation led to a new, granular process abstraction that is simpler than Tock’s, has formal security guarantees (that are verified in half a minute), and outperforms Tock on certain critical code paths.}
}
