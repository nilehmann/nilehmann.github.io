@inproceedings{10.1145/3009837.3009856,
  author = {Lehmann, Nico and Tanter, \'{E}ric},
  title = {Gradual refinement types},
  year = {2017},
  isbn = {9781450346603},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  url = {https://doi.org/10.1145/3009837.3009856},
  doi = {10.1145/3009837.3009856},
  abstract = {Refinement types are an effective language-based verification technique. However, as any expressive typing discipline, its strength is its weakness, imposing sometimes undesired rigidity. Guided by abstract interpretation, we extend the gradual typing agenda and develop the notion of gradual refinement types, allowing smooth evolution and interoperability between simple types and logically-refined types. In doing so, we address two challenges unexplored in the gradual typing literature: dealing   with imprecise logical information, and with dependent function types. The first challenge leads to a crucial notion of locality for refinement formulas, and the second yields novel operators related to type- and term-level substitution, identifying new opportunity for runtime errors in gradual dependently-typed languages. The gradual language we present is type safe, type sound, and satisfies the refined criteria for gradually-typed languages of Siek et al. We also explain how to extend our approach to   richer refinement logics, anticipating key challenges to consider.},
  booktitle = {Proceedings of the 44th ACM SIGPLAN Symposium on Principles of Programming Languages},
  pages = {775â€“788},
  numpages = {14},
  keywords = {abstract interpretation, gradual typing, refinement types},
  location = {Paris, France},
  series = {POPL '17},
  number = {POPL}
}
